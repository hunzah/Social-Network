{"version":3,"file":"static/js/4.d9cc51cc.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Navbar/Profile/MyPosts/MyPosts.module.css?5179","webpack://samurai-way/./src/components/Navbar/Profile/MyPosts/Post/Post.module.css?9408","components/Navbar/Profile/MyPosts/Post/Post.tsx","components/Navbar/Profile/MyPosts/MyPosts.tsx","components/Navbar/Profile/MyPosts/MyPostsContainer.tsx","components/Navbar/Profile/ProfileInfo/ProfileStatus.tsx","components/Navbar/Profile/ProfileInfo/ProfileInfo.tsx","components/Navbar/Profile/Profile.tsx","components/Navbar/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__23e4I\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__wn7m5\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\nimport defaultPhoto from '../../../../../assets/img/default avatar.png'\r\n\r\ntype PostType = {\r\n    message: string,\r\n    count: number\r\n    avatar:File | undefined\r\n}\r\n\r\nexport const Post = (props: PostType) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={props.avatar? props.avatar.toString() : defaultPhoto}/>\r\n            <div>{props.message}</div>\r\n            <span>likes: </span>\r\n            {props.count}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from './Post/Post';\r\nimport {ProfilePageType} from '../../../redux/store';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {required} from '../../../../utilits/validators';\r\nimport {TextArea} from '../../../common/FormsControls/FormsControls';\r\n\r\ntype FormValueType = {\r\n    newPostText: string\r\n}\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    onAddPost: (newPostText: string) => void\r\n    profilePage: ProfilePageType\r\n    avatar: File | undefined\r\n}\r\n\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n    const {avatar, onAddPost, profilePage} = props\r\n\r\n    const postElements = profilePage.postsArr.map(item => <Post key={item.id} message={item.message}\r\n                                                                count={item.count} avatar={avatar}/>)\r\n\r\n    const handleAddPost = (value: FormValueType) => {\r\n        onAddPost(value.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Post</h3>\r\n            <div>\r\n                <ReduxMyPostForm onSubmit={handleAddPost}/>\r\n            </div>\r\n            <div>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst MyPostForm = (props: InjectedFormProps<FormValueType>) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={TextArea}\r\n                   name=\"newPostText\"\r\n                   validate={[required]}\r\n            />\r\n            <div>\r\n                <button type=\"submit\">Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxMyPostForm = reduxForm<FormValueType>({\r\n    form: 'ProfileAddNewPostForm'\r\n})(MyPostForm)","import React from 'react';\r\nimport {AddPostAC, ProfilePageType} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    profilePage: ProfilePageType\r\n    avatar: File\r\n\r\n}\r\ntype mapDispatchToPropsType = {\r\n    onAddPost: (newPostText: string) => void\r\n}\r\nconst mapStateToProps = (state: mapStateToPropsType) => {\r\n    return ({\r\n        profilePage: state.profilePage,\r\n        avatar: state.profilePage.profile?.photos?.large\r\n    })\r\n\r\n}\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        onAddPost: (newPostText: string) => {\r\n            dispatch(AddPostAC(newPostText));\r\n        }\r\n    };\r\n};\r\n\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\n\r\n\r\ntype PropsType = {\r\n    value: string\r\n    status: string\r\n    updateStatus: (userId: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<PropsType> {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    editMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        });\r\n    }\r\n    deActivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n    onStatusChanged = (e: any) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: any, prevState: any) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.isOwner ?\r\n                    <div>\r\n                        {!this.state.editMode ?\r\n                            <span onDoubleClick={this.editMode}>{this.props.status || 'No status'}</span>\r\n                            :\r\n                            <input autoFocus={true} onBlur={this.deActivateEditMode} value={this.state.status}\r\n                                   onChange={this.onStatusChanged}/>\r\n                        }\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <span>{this.props.status || 'No status'}</span>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {ContactType, ProfileType} from '../../../redux/profile-reducer';\r\nimport defaultPhoto from './../../../../assets/img/default avatar.png'\r\nimport {ProfileStatus} from './ProfileStatus';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (userId: string) => void\r\n    isOwner: boolean\r\n    savePhotoThunk: (file: File) => void\r\n}\r\n\r\n\r\nexport const ProfileInfo = (props: PropsType) => {\r\n\r\n    const {status, updateStatus, isOwner, savePhotoThunk, profile} = props\r\n\r\n    const photo = profile.photos?.large\r\n    const fullName = profile.fullName\r\n    const aboutMe = profile.aboutMe\r\n    const contacts: ContactType = profile.contacts\r\n    const contactsArray = contacts ? Object.entries(contacts) : [];\r\n\r\n    function onMainPhotoSelect(e: ChangeEvent<HTMLInputElement>) {\r\n        if (e.target.files?.length) {\r\n            savePhotoThunk(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img className={s.profileAvatar} src={photo || defaultPhoto} alt=\"profile\"/>\r\n                {isOwner &&\r\n                    <div>\r\n                        <input type=\"file\" onChange={onMainPhotoSelect}/>\r\n                    </div>}\r\n                {fullName && <div>{fullName}</div>}\r\n                {/*{aboutMe && <div>about me: {aboutMe}</div>}*/}\r\n                {contacts &&\r\n                    <div> My Contacts:\r\n                        {contactsArray.map((i, id) => {\r\n                            return (\r\n                                <div key={id}>\r\n                                    {`${i[0]}: ${i[1] ? i[1] : `add your ${i[0]} link in Settings`} `}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                }\r\n            </div>\r\n            <ProfileStatus isOwner={isOwner} value={'ok'} status={status} updateStatus={updateStatus}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../redux/profile-reducer';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (userId: string) => void\r\n    owner: boolean\r\n    savePhotoThunk: (file: File) => void\r\n}\r\nexport const Profile = (props: PropsType) => {\r\n    const {profile, status, updateStatus, owner, savePhotoThunk} = props\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={owner} profile={profile} status={status} updateStatus={updateStatus}\r\n                         savePhotoThunk={savePhotoThunk}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {\r\n    getStatusThunkCreator,\r\n    ProfileType,\r\n    savePhotoThunkCreator,\r\n    setProfileThunkCreator,\r\n    updateStatusThunkCreator\r\n} from '../../redux/profile-reducer';\r\nimport {AppReduxStateType} from '../../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {Profile} from './Profile';\r\nimport {compose} from 'redux';\r\nimport {withAuthRedirect} from '../../../hoc/WithAuthRedirect';\r\n\r\nexport interface MatchParams {\r\n    userId: string;\r\n}\r\n\r\ntype MapStateType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    userId: number | null\r\n}\r\nexport type MapDispatchType = {\r\n    setProfileThunk: (userId: number | null) => void\r\n    getStatusThunk: (userId: number | null) => void\r\n    updateStatusThunk: (status: string) => void\r\n    savePhotoThunk: (file: File) => void\r\n}\r\n\r\nexport type ProfilesContainerPropsType = MapStateType & MapDispatchType & RouteComponentProps<MatchParams>;\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfilesContainerPropsType> {\r\n    refreshProfile() {\r\n        let userId: number | null = Number(this.props.match.params.userId);\r\n        if (!userId) {\r\n            userId = this.props.userId\r\n        }\r\n        this.props.setProfileThunk(userId)\r\n        this.props.getStatusThunk(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ProfilesContainerPropsType, prevState: any, snapshot: any) {\r\n        if (prevProps.match.params.userId !== this.props.match.params.userId)\r\n            this.refreshProfile()\r\n        console.log(this.props.profile)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.profile && <Profile profile={this.props.profile}\r\n                                                status={this.props.status}\r\n                                                updateStatus={this.props.updateStatusThunk}\r\n                                                owner={!this.props.match.params.userId}\r\n                                                savePhotoThunk={this.props.savePhotoThunk}/>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppReduxStateType): MapStateType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    userId: state.auth.id\r\n})\r\n\r\nconst mapDispatchToProps: MapDispatchType = {\r\n    setProfileThunk: setProfileThunkCreator,\r\n    getStatusThunk: getStatusThunkCreator,\r\n    updateStatusThunk: updateStatusThunkCreator,\r\n    savePhotoThunk: savePhotoThunkCreator\r\n}\r\n\r\nexport default compose(\r\n    withRouter,\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n)(ProfileContainer) as React.ComponentType\r\n\r\n\r\n\r\n\r\n"],"names":["Post","props","className","s","src","avatar","toString","defaultPhoto","message","count","ReduxMyPostForm","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","name","validate","required","type","MyPostsContainer","connect","state","profilePage","profile","photos","large","dispatch","onAddPost","newPostText","AddPostAC","postElements","postsArr","map","item","id","value","ProfileStatus","editMode","status","setState","deActivateEditMode","updateStatus","onStatusChanged","e","currentTarget","prevProps","prevState","this","isOwner","autoFocus","onBlur","onChange","onDoubleClick","React","ProfileInfo","savePhotoThunk","photo","fullName","contacts","aboutMe","contactsArray","Object","entries","alt","target","files","length","i","Profile","owner","ProfileContainer","userId","Number","match","params","setProfileThunk","getStatusThunk","refreshProfile","snapshot","console","log","updateStatusThunk","mapDispatchToProps","setProfileThunkCreator","getStatusThunkCreator","updateStatusThunkCreator","savePhotoThunkCreator","compose","withRouter","withAuthRedirect","auth"],"sourceRoot":""}